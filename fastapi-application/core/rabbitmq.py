import logging
import time

import pika

log = logging.getLogger(__name__)

RMQ_HOST = "localhost"
RMQ_PORT = 5672
RMQ_USER = "guest"
RMQ_PASSWORD = "guest"
MQ_EXCHANGE = ""
MQ_ROUTING_KEY = "logs"


class RabbitMQ:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π RabbitMQ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º."""

    def __init__(
        self,
        host=RMQ_HOST,
        port=RMQ_PORT,
        user=RMQ_USER,
        password=RMQ_PASSWORD,
    ):
        self.host = host
        self.port = port
        self.credentials = pika.PlainCredentials(user, password)
        self.connection = None
        self.channel = None
        self._connect()  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

    def _connect(self):
        """–°–æ–∑–¥–∞—ë—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –∫–∞–Ω–∞–ª —Å RabbitMQ."""
        try:
            if self.connection and self.connection.is_open:
                return

            log.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ...")

            self.connection = pika.BlockingConnection(
                pika.ConnectionParameters(
                    host=self.host,
                    port=self.port,
                    credentials=self.credentials,
                    heartbeat=60,  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    blocked_connection_timeout=300,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
                )
            )
            self.channel = self.connection.channel()
            self.channel.confirm_delivery()  # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏
            log.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ.")

        except Exception as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å RabbitMQ: {e}")
            time.sleep(5)
            self._connect()  # –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

    def publish(self, queue, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏."""
        self._connect()  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ

        try:
            self.channel.queue_declare(queue=queue, durable=True)
            message_body = message.encode("utf-8")
            self.channel.basic_publish(
                exchange=MQ_EXCHANGE,
                routing_key=queue,
                body=message_body,
            )

            log.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å {queue}")
            return True

        except Exception:
            log.error(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ {queue} (unroutable).")
            return False

        # except pika.exceptions.AMQPConnectionError as e:
        #     log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        #     time.sleep(5)
        #     self._connect()  # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
        #     return self.publish(queue, message)

    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å RabbitMQ."""
        if self.connection and self.connection.is_open:
            self.connection.close()
            log.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å RabbitMQ –∑–∞–∫—Ä—ã—Ç–æ.")


rabbitmq = RabbitMQ()
