version: "3.9"

services:

  pg:
    image: postgres:latest
    container_name: postgres_db_queue_api

    environment:
      POSTGRES_DB: queue_api
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data # Сохранение данных после перезапуска
    restart: always
    networks:
      - backend

  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: rabbitmq
    hostname: rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"   # AMQP (Celery)
      - "15672:15672" # RabbitMQ Web UI
    networks:
      - backend

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.org
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - pg
    restart: unless-stopped
    networks:
      - backend

  redis:
    image: redis:latest
    container_name: redis_queue_api
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data # Сохранение данных Redis
    restart: always
    networks:
      - backend

  mongo:
    image: mongo:6.0
    container_name: mongodb_queue_api
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
    restart: always
    networks:
      - backend

  # Сервис FastAPI-приложения
  app:
    build: .
    container_name: fastapi_app
    env_file:
      - .env.docker
    environment:
      APP_PORT: 8000
      DATABASE_URL: postgresql://user:password@pg:5432/queue_api
      REDIS_URL: redis://redis:6379/0
      # При необходимости можно добавить BROKER_URL, если используется RabbitMQ
      # BROKER_URL: amqp://guest:guest@rabbitmq:5672/

    ports:
      - "50000:50000"
    depends_on:
      - pg
      - redis
      - rabbitmq
    restart: unless-stopped
    networks:
      - backend

  # Сервис Celery worker
  worker:
    build: .
    container_name: celery_worker
    env_file:
      - .env.docker
    environment:
      BROKER_URL: amqp://guest:guest@rabbitmq:5672//
      DATABASE_URL: postgresql://user:password@pg:5432/queue_api
      REDIS_URL: redis://redis:6379/0
      # BROKER_URL: amqp://guest:guest@rabbitmq:5672/ (если используется)
    command: celery -A tasks.celery_app worker --loglevel=INFO --concurrency=4 --queues logs,errors
    depends_on:
      - pg
      - redis
      - rabbitmq
    restart: unless-stopped
    networks:
      - backend

volumes:
  pg_data:
    driver: local
  redis_data:
    driver: local
  mongo-data:
    driver: local
  mongo-config:
    driver: local

networks:
  backend:
    driver: bridge